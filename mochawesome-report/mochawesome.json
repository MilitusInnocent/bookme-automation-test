{
  "stats": {
    "suites": 35,
    "tests": 51,
    "passes": 48,
    "pending": 0,
    "failures": 3,
    "start": "2021-05-12T18:20:35.024Z",
    "end": "2021-05-12T18:22:37.117Z",
    "duration": 122093,
    "testsRegistered": 51,
    "passPercent": 94.11764705882352,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1353eb3b-22f7-4623-8d4a-f2be2299b4c4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12b89869-b7d1-4a85-953f-5dab7cafb1ca",
          "title": "Bookme App API Testing",
          "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
          "file": "\\test\\tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6ea1f395-668f-4640-af1f-43fbf9f31c45",
              "title": "GET All Services",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get all services",
                  "fullTitle": "Bookme App API Testing GET All Services Get all services",
                  "timedOut": false,
                  "duration": 11605,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/services')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data)\n        .to.be.an.instanceof(Array)\n        .and.to.have.property(0)\n    expect(res.body.data[0]).to.have.property('id').and.to.be.a('number')\n    res.body.data[0].should.all.have.property('id')\n    res.body.should.have.keys('status', 'data', 'message')\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "8bd4626d-d25b-480b-9715-c77116151941",
                  "parentUUID": "6ea1f395-668f-4640-af1f-43fbf9f31c45",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET All Services Should return an error",
                  "timedOut": false,
                  "duration": 1743,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/service')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "4617abfe-8925-4794-a124-4a7a9ecbf29a",
                  "parentUUID": "6ea1f395-668f-4640-af1f-43fbf9f31c45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bd4626d-d25b-480b-9715-c77116151941",
                "4617abfe-8925-4794-a124-4a7a9ecbf29a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0c544f71-6eb7-4221-9fa4-f0b7d95d612f",
              "title": "POST Create a Service",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST create a service",
                  "fullTitle": "Bookme App API Testing POST Create a Service POST create a service",
                  "timedOut": false,
                  "duration": 1837,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body = {\n  \"name\": \"haily\" + Math.random(),\n  \"duration_in_min\": 20,\n  \"charge\": 200,\n  \"description\": \"come and cut your head, yeah, your head\",\n  \"category_id\": 1\n}\nchai.request(baseUrl)\n  .post('/services')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data)\n        .to.be.an.instanceof(Object)\n    expect(res.body.data).to.have.keys('id', 'name', 'duration_in_min', 'charge', 'description', 'category', 'status')\n    res.body.should.have.keys('status', 'data', 'message')\n    idForService = res.body.data.id\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "d75fdcf3-8040-4b0f-a5b3-89165ac00a30",
                  "parentUUID": "0c544f71-6eb7-4221-9fa4-f0b7d95d612f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d75fdcf3-8040-4b0f-a5b3-89165ac00a30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1837,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "17c32892-265b-4120-a602-b64ff50a8441",
              "title": "PUT Update a Service",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "PUT Update a service",
                  "fullTitle": "Bookme App API Testing PUT Update a Service PUT Update a service",
                  "timedOut": false,
                  "duration": 1966,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"id\": 71,\n  \"name\": \"barbings\",\n  \"duration_in_min\": 30,\n  \"charge\": 600,\n  \"category\": \"politics\",\n  \"category_id\": \"1\",\n  \"status\": \"active\",\n  \"description\": \"updated\"\n}\nchai.request(baseUrl)\n  .put('/services')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"service updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "228c6856-0030-4db6-af65-edeac34d73a3",
                  "parentUUID": "17c32892-265b-4120-a602-b64ff50a8441",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "228c6856-0030-4db6-af65-edeac34d73a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1966,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1f290743-fb88-46d8-8913-d04ac68bf849",
              "title": "GET a Service detail",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get a service detail",
                  "fullTitle": "Bookme App API Testing GET a Service detail Get a service detail",
                  "timedOut": false,
                  "duration": 11947,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/services/1')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    expect(res.body.data.locations).to.be.an.instanceof(Array)\n    res.body.should.have.keys('status', 'data', 'message')\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "32868c03-148b-4fd1-b585-81cf9f87ab60",
                  "parentUUID": "1f290743-fb88-46d8-8913-d04ac68bf849",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET a Service detail Should return an error",
                  "timedOut": false,
                  "duration": 2242,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/service/300')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "6256a518-14c8-41df-9c0c-3164c90fb21e",
                  "parentUUID": "1f290743-fb88-46d8-8913-d04ac68bf849",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32868c03-148b-4fd1-b585-81cf9f87ab60",
                "6256a518-14c8-41df-9c0c-3164c90fb21e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14189,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ee063b8c-098f-4b47-aa1c-978e5729a66e",
              "title": "POST Update Multiple Services",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update multiple services",
                  "fullTitle": "Bookme App API Testing POST Update Multiple Services POST Update multiple services",
                  "timedOut": false,
                  "duration": 2298,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"ids\": [1, 2],\n  \"status\": \"inactive\"\n}\nchai.request(baseUrl)\n  .post('/services/updateStatusForServices')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    expect(res.body.data).to.contain.keys(\"totalServiceCount\", \"totalServicesUpdated\", \"totalFailedUpdates\", \"errors\")\n    expect(res.body.data.totalServiceCount).to.be.equal(2)\n    expect(res.body.data.totalServiceCount).to.be.equal(res.body.data.totalServicesUpdated)\n    expect(res.body.data.totalFailedUpdates).to.be.equal(0)\n    expect(res.body.data.errors).to.be.an('array')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"services status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "30e2fb4d-8ffe-4c02-ba47-09a85025b87d",
                  "parentUUID": "ee063b8c-098f-4b47-aa1c-978e5729a66e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30e2fb4d-8ffe-4c02-ba47-09a85025b87d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2298,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "09c799ef-9e0e-47bc-a67e-a7f7500e11f1",
              "title": "DELETE Delete a Service",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "DELETE Delete a Service",
                  "fullTitle": "Bookme App API Testing DELETE Delete a Service DELETE Delete a Service",
                  "timedOut": false,
                  "duration": 5157,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .delete('/services/' + idForService)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"service deleted successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "68cbfb91-3ca2-4a5a-802b-7d23dc79d68b",
                  "parentUUID": "09c799ef-9e0e-47bc-a67e-a7f7500e11f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing DELETE Delete a Service Should return an error",
                  "timedOut": false,
                  "duration": 3905,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"ids\": [1, 2],\n  \"status\": \"inactive\"\n}\nchai.request(baseUrl)\n  .delete('/services/9')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    expect(res.body.status).to.be.equal(false)\n    res.body.should.have.keys('status', 'message')\n    res.body.message.should.be.equal(\"Service not found\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "f3092c08-2fe2-4ae4-a7ee-44d887c211b5",
                  "parentUUID": "09c799ef-9e0e-47bc-a67e-a7f7500e11f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68cbfb91-3ca2-4a5a-802b-7d23dc79d68b",
                "f3092c08-2fe2-4ae4-a7ee-44d887c211b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9062,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8c84baff-e4d9-4729-9728-de4be1baa11f",
              "title": "POST Create a category",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST create a category",
                  "fullTitle": "Bookme App API Testing POST Create a category POST create a category",
                  "timedOut": false,
                  "duration": 6030,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body = {\n \"name\": \"accounting\" + Math.random(),\n \"description\": \"treat patients\"\n    }\nchai.request(baseUrl)\n  .post('/categories')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n   expect(res).to.have.status(200)\n   expect(res.body.status).to.be.equal(true)\n   expect(res.body.data).to.be.an.instanceof(Object)\n   expect(res.body.data.id).to.be.a('number')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"category created successfully\")\n    idForCategory = res.body.data.id\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "66210196-996c-4e35-b20e-a3ddaff8eb70",
                  "parentUUID": "8c84baff-e4d9-4729-9728-de4be1baa11f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66210196-996c-4e35-b20e-a3ddaff8eb70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6030,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "c91bf5a3-896d-46e6-a65f-8b267592b0f6",
              "title": "GET All categories",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get all categories",
                  "fullTitle": "Bookme App API Testing GET All categories Get all categories",
                  "timedOut": false,
                  "duration": 2246,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/categories')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data)\n        .to.be.an.instanceof(Array)\n        .and.to.have.property(0)\n    expect(res.body.data[0]).to.have.property('id').and.to.be.a('number')\n    res.body.data[0].should.all.have.property('id')\n    res.body.should.have.keys('status', 'data', 'message')\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "1046c7bf-2498-4116-a8f3-bebdf1acdade",
                  "parentUUID": "c91bf5a3-896d-46e6-a65f-8b267592b0f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET All categories Should return an error",
                  "timedOut": false,
                  "duration": 2504,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/category')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "51fa7c7d-196c-41c1-b975-5dbe3f58dcb4",
                  "parentUUID": "c91bf5a3-896d-46e6-a65f-8b267592b0f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1046c7bf-2498-4116-a8f3-bebdf1acdade",
                "51fa7c7d-196c-41c1-b975-5dbe3f58dcb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4750,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "8efd2ecf-29e1-472a-a626-1a188ea60554",
              "title": "GET a Category detail",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get a category detail",
                  "fullTitle": "Bookme App API Testing GET a Category detail Get a category detail",
                  "timedOut": false,
                  "duration": 2398,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/categories/1')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"categry generated successfully\")\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "7aef4e05-14ff-4cb4-9edc-977a004c5bbf",
                  "parentUUID": "8efd2ecf-29e1-472a-a626-1a188ea60554",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET a Category detail Should return an error",
                  "timedOut": false,
                  "duration": 2902,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/categorie/300')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "9607a606-0519-4764-b879-e896bc54bc0d",
                  "parentUUID": "8efd2ecf-29e1-472a-a626-1a188ea60554",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7aef4e05-14ff-4cb4-9edc-977a004c5bbf",
                "9607a606-0519-4764-b879-e896bc54bc0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5300,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ddba9038-1378-4dc7-b420-8b7d8a2c8d6b",
              "title": "PUT Update a category",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "PUT Update a category",
                  "fullTitle": "Bookme App API Testing PUT Update a category PUT Update a category",
                  "timedOut": false,
                  "duration": 2513,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"id\": \"1\",\n  \"name\": \"politicking\"\n}\nchai.request(baseUrl)\n.put('/categories')\n.send(message_body)\n.set({ \"Authorization\": `Bearer ${token}` })\n.then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n  res.body.should.have.keys('status', 'data', 'message')\n  res.body.message.should.be.equal(\"category updated successfully\")\n  done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "4909debc-1667-43a2-a255-3fdbb637bab1",
                  "parentUUID": "ddba9038-1378-4dc7-b420-8b7d8a2c8d6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4909debc-1667-43a2-a255-3fdbb637bab1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2513,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "2edf8515-d967-4561-a09e-ac11aff28646",
              "title": "DELETE Delete a category",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "DELETE Delete a category",
                  "fullTitle": "Bookme App API Testing DELETE Delete a category DELETE Delete a category",
                  "timedOut": false,
                  "duration": 2967,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .delete('/categories/' + idForCategory)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"category deleted successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "279c4cd1-1ed9-41a1-b287-fbb6f5f01cc2",
                  "parentUUID": "2edf8515-d967-4561-a09e-ac11aff28646",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing DELETE Delete a category Should return an error",
                  "timedOut": false,
                  "duration": 1839,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"ids\": [1, 2],\n  \"status\": \"inactive\"\n}\nchai.request(baseUrl)\n  .delete('/categories/9')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    expect(res.body.status).to.be.equal(false)\n    res.body.should.have.keys('status', 'message')\n    res.body.message.should.be.equal(\"Category not found\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "6c323f3e-4140-4abb-823f-d0f5973f5cd8",
                  "parentUUID": "2edf8515-d967-4561-a09e-ac11aff28646",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "279c4cd1-1ed9-41a1-b287-fbb6f5f01cc2",
                "6c323f3e-4140-4abb-823f-d0f5973f5cd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4806,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "92b11f23-cf03-468c-b4d0-9d43022fbe9e",
              "title": "POST Create a location",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST create a location",
                  "fullTitle": "Bookme App API Testing POST Create a location POST create a location",
                  "timedOut": false,
                  "duration": 1836,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body = {\n \"name\": \"starlight\" + Math.random(),\n \"city\": \"osogboo\",\n \"state\": \"osun state\",\n \"country\": \"nigeria\",\n \"office_no\": \"32\",\n \"street_name\": \"Onward\",\n \"zip_code\": \"230222\",\n \"phone_no\": \"09876543456\",\n \"email\": \"imilitus+TC_03@email.com\",\n \"manager_id\": \"582c3a52-e36d-4ce2-aa37-0ccdfffcce3f\"\n        }      \nchai.request(baseUrl)\n  .post('/locations')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n   expect(res).to.have.status(200)\n   expect(res.body.status).to.be.equal(true)\n   expect(res.body.data).to.be.an.instanceof(Object)\n   expect(res.body.data.id).to.be.a('number')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"location created successfully\")\n    idForLocation = res.body.data.id\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "4da8fea8-e12d-4978-890a-9dae3f8e00f5",
                  "parentUUID": "92b11f23-cf03-468c-b4d0-9d43022fbe9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4da8fea8-e12d-4978-890a-9dae3f8e00f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1836,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "222dd4ce-80a4-48d4-85d6-3b8b1dc866a4",
              "title": "GET All locations",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get all locations",
                  "fullTitle": "Bookme App API Testing GET All locations Get all locations",
                  "timedOut": false,
                  "duration": 1418,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/locations')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data)\n        .to.be.an.instanceof(Array)\n        .and.to.have.property(0)\n    expect(res.body.data[0]).to.have.property('id').and.to.be.a('number')\n    res.body.data[0].should.all.have.property('id')\n    res.body.should.have.keys('status', 'data', 'message')\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "2d0eb3b7-4d64-4449-aadb-11f8b478d73b",
                  "parentUUID": "222dd4ce-80a4-48d4-85d6-3b8b1dc866a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET All locations Should return an error",
                  "timedOut": false,
                  "duration": 1848,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/location')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "6a7d63c0-bad5-4ed7-92f8-d33d28bcc2fb",
                  "parentUUID": "222dd4ce-80a4-48d4-85d6-3b8b1dc866a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d0eb3b7-4d64-4449-aadb-11f8b478d73b",
                "6a7d63c0-bad5-4ed7-92f8-d33d28bcc2fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3266,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "1c7f880d-210d-4b02-9ee5-48f8a9e788b6",
              "title": "GET a location detail",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get a location detail",
                  "fullTitle": "Bookme App API Testing GET a location detail Get a location detail",
                  "timedOut": false,
                  "duration": 1644,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/locations/40')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"location generated successfully\")\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "43633958-83f3-4590-90a0-61144265a15a",
                  "parentUUID": "1c7f880d-210d-4b02-9ee5-48f8a9e788b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET a location detail Should return an error",
                  "timedOut": false,
                  "duration": 1627,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/location/300')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "da76c4fa-4136-4650-8db9-2a86aca80ad2",
                  "parentUUID": "1c7f880d-210d-4b02-9ee5-48f8a9e788b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43633958-83f3-4590-90a0-61144265a15a",
                "da76c4fa-4136-4650-8db9-2a86aca80ad2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3271,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "35dac8c1-81b4-4262-9d34-b2f308b6ea4c",
              "title": "PUT Update a location",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "PUT Update a location",
                  "fullTitle": "Bookme App API Testing PUT Update a location PUT Update a location",
                  "timedOut": false,
                  "duration": 1632,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"id\": \"1\",\n  \"name\": \"starlight\",\n  \"city\": \"osogbo\",\n  \"state\": \"osun state\",\n  \"country\": \"nigeria2\",\n  \"street_no\": \"32\",\n  \"street_name\": \"Onward\",\n  \"zip_code\": \"230222\",\n  \"phone_number\": \"09876543456\",\n  \"phone_no\": \"09876543456\",\n  \"email\": \"email@email.com\",\n  \"manager_id\": \"582c3a52-e36d-4ce2-aa37-0ccdfffcce3f\",\n  \"longitude\": \"\",\n  \"latitude\": \"\",\n  \"office_no\": \"\"\n        }       \nchai.request(baseUrl)\n  .put('/locations')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"location updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "72b93785-56b5-4d3d-a1d0-19bf57b50348",
                  "parentUUID": "35dac8c1-81b4-4262-9d34-b2f308b6ea4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72b93785-56b5-4d3d-a1d0-19bf57b50348"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1632,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3a4f9652-20c4-44db-9d0b-b7bba4f6364a",
              "title": "POST Update Multiple Locations Status",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update multiple locations status",
                  "fullTitle": "Bookme App API Testing POST Update Multiple Locations Status POST Update multiple locations status",
                  "timedOut": false,
                  "duration": 1426,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"ids\": [2, 1, 1],\n  \"status\": \"inactive\"\n          }          \nchai.request(baseUrl)\n  .post('/locations/updateStatusForLocations')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.data.should.have.keys(\"totalLocationCount\", \"totalLocationsUpdated\", \"totalFailedUpdates\", \"errors\")\n    expect(res.body.data.totalLocationCount).to.be.equal(3)\n    expect(res.body.data.totalLocationCount).to.be.equal(res.body.data.totalLocationsUpdated)\n    expect(res.body.data.totalFailedUpdates).to.be.equal(0)\n    expect(res.body.data.errors).to.be.an('array')\n    res.body.message.should.be.equal(\"location status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "be58a301-88e3-4bde-b75f-d101909abf54",
                  "parentUUID": "3a4f9652-20c4-44db-9d0b-b7bba4f6364a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be58a301-88e3-4bde-b75f-d101909abf54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1426,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "94f7170f-1708-4386-ab62-d58948ec4084",
              "title": "DELETE Delete a location",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "DELETE Delete a location",
                  "fullTitle": "Bookme App API Testing DELETE Delete a location DELETE Delete a location",
                  "timedOut": false,
                  "duration": 1631,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .delete('/locations/' + idForLocation)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"location deleted successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "afa25b4c-e484-44c8-ab41-724489979be9",
                  "parentUUID": "94f7170f-1708-4386-ab62-d58948ec4084",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing DELETE Delete a location Should return an error",
                  "timedOut": false,
                  "duration": 1632,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .delete('/locations/800')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    expect(res.body.status).to.be.equal(false)\n    res.body.should.have.keys('status', 'message')\n    res.body.message.should.be.equal(\"Location not found\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "ad430984-6272-4954-87d4-316808a165a2",
                  "parentUUID": "94f7170f-1708-4386-ab62-d58948ec4084",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afa25b4c-e484-44c8-ab41-724489979be9",
                "ad430984-6272-4954-87d4-316808a165a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3263,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ad3136fd-7c71-415b-9f06-76450792fef4",
              "title": "GET All servicelocations",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get all servicelocations",
                  "fullTitle": "Bookme App API Testing GET All servicelocations Get all servicelocations",
                  "timedOut": false,
                  "duration": 2069,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/servicelocations')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data)\n        .to.be.an.instanceof(Array)\n        .and.to.have.property(0)\n    expect(res.body.data[0]).to.have.property('id').and.to.be.a('number')\n    res.body.data[0].should.all.have.property('id')\n    expect(res.body.data[0]).to.contain.keys('id', \"status\", 'staff_id', 'service_name', 'location_name')\n    expect(res.body.data[0]).to.contain.keys(\"status\", 'staff_id', 'service_name', 'location_name').and.to.be.a('string')\n    res.body.should.have.keys('status', 'data', 'message')\n    done()\n  }).catch((err) => done(err))",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 500\n    at C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js:571:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "741da8cd-882a-443d-9465-c345eb4d57b1",
                  "parentUUID": "ad3136fd-7c71-415b-9f06-76450792fef4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET All servicelocations Should return an error",
                  "timedOut": false,
                  "duration": 1552,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/servicelocation')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "f145abc5-f272-4b8a-b34c-0c63e1c9f688",
                  "parentUUID": "ad3136fd-7c71-415b-9f06-76450792fef4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f145abc5-f272-4b8a-b34c-0c63e1c9f688"
              ],
              "failures": [
                "741da8cd-882a-443d-9465-c345eb4d57b1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3621,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "623e3598-fdbc-42ec-ab67-632a536a6e7d",
              "title": "GET a servicelocation",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get a servicelocation",
                  "fullTitle": "Bookme App API Testing GET a servicelocation Get a servicelocation",
                  "timedOut": false,
                  "duration": 1472,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/servicelocations/1')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    expect(res.body.data.location).to.be.an.instanceof(Object)\n    expect(res.body.data.service).to.be.an.instanceof(Object)\n    expect(res.body.data.service).to.contain.keys('id', 'Name', 'Duration', 'Charge', 'Description', 'BusinessId')\n    expect(res.body.data).to.have.property('id').and.to.be.a('number')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"service location generated successfully\")\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "32730139-24b7-4695-8945-b5aee13dd656",
                  "parentUUID": "623e3598-fdbc-42ec-ab67-632a536a6e7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET a servicelocation Should return an error",
                  "timedOut": false,
                  "duration": 1230,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/servicelocation/300')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "947d5ed9-12a7-434e-adca-0212c8bc2c5e",
                  "parentUUID": "623e3598-fdbc-42ec-ab67-632a536a6e7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32730139-24b7-4695-8945-b5aee13dd656",
                "947d5ed9-12a7-434e-adca-0212c8bc2c5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2702,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5c694319-a629-4519-b870-4c3b5510f5de",
              "title": "PUT Update a servicelocation",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "PUT Update a servicelocation",
                  "fullTitle": "Bookme App API Testing PUT Update a servicelocation PUT Update a servicelocation",
                  "timedOut": false,
                  "duration": 1635,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"id\": \"1\",\n  \"staff_id\": \"5a1ac56f-555b-4bd9-860a-5f750f9ed1eb\",\n  \"location_id\": \"1\",\n  \"service_id\": \"2\",\n  \"status\": \"active\"\n}            \nchai.request(baseUrl)\n  .put('/servicelocations')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"servicelocation updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "dd31744b-8e12-4c7b-a58f-dd7afbe69e02",
                  "parentUUID": "5c694319-a629-4519-b870-4c3b5510f5de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd31744b-8e12-4c7b-a58f-dd7afbe69e02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1635,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "19a36b4b-f8f6-46ec-849a-c0a7990bc92e",
              "title": "POST Update Multiple Service Location Status",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update multiple service locations status",
                  "fullTitle": "Bookme App API Testing POST Update Multiple Service Location Status POST Update multiple service locations status",
                  "timedOut": false,
                  "duration": 1828,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"ids\": [70, 76, 79],\n  \"status\": \"active\"\n}              \nchai.request(baseUrl)\n  .post('/servicelocations/updateStatusForServiceLocations')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n     expect(res.body.data.totalServiceLocationCount).to.be.equal(3)\n     expect(res.body.data.totalServiceLocationCount).to.be.equal(res.body.data.totalServiceLocationsUpdated)\n     expect(res.body.data.totalFailedUpdates).to.be.equal(0)\n     expect(res.body.data.errors).to.be.an('array')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.data.should.have.keys(\"totalServiceLocationCount\", \"totalServiceLocationsUpdated\", \"totalFailedUpdates\", \"errors\")\n    res.body.message.should.be.equal(\"service location status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "c7caf16c-64f3-46ff-83db-81b7b2674c0c",
                  "parentUUID": "19a36b4b-f8f6-46ec-849a-c0a7990bc92e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7caf16c-64f3-46ff-83db-81b7b2674c0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1828,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "5dd95e56-9f2b-4da4-94fd-378d0fc12c9d",
              "title": "DELETE Delete a servicelocation",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "DELETE Delete a servicelocation",
                  "fullTitle": "Bookme App API Testing DELETE Delete a servicelocation DELETE Delete a servicelocation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .delete('/servicelocations/' + idForServiceLocation)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"service location deleted successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {
                    "message": "ReferenceError: idForServiceLocation is not defined",
                    "estack": "ReferenceError: idForServiceLocation is not defined\n    at Context.<anonymous> (test\\tests.js:679:52)\n    at processImmediate (internal/timers.js:461:21)",
                    "diff": null
                  },
                  "uuid": "12093fe4-02b2-4f61-b185-6887ef2a1aa6",
                  "parentUUID": "5dd95e56-9f2b-4da4-94fd-378d0fc12c9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing DELETE Delete a servicelocation Should return an error",
                  "timedOut": false,
                  "duration": 1609,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .delete('/servicelocations/800')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    expect(res.body.status).to.be.equal(false)\n    res.body.should.have.keys('status', 'message')\n    res.body.message.should.be.equal(\"Service location not found\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "c70bc1a5-1aca-4e96-b035-5d6022aa65bd",
                  "parentUUID": "5dd95e56-9f2b-4da4-94fd-378d0fc12c9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c70bc1a5-1aca-4e96-b035-5d6022aa65bd"
              ],
              "failures": [
                "12093fe4-02b2-4f61-b185-6887ef2a1aa6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1610,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "3c5ab079-b1bb-48ff-a201-f22f3eed006f",
              "title": "POST Create a Booking",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST create a Booking",
                  "fullTitle": "Bookme App API Testing POST Create a Booking POST create a Booking",
                  "timedOut": false,
                  "duration": 1607,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const message_body = {\n \"staff_id\": \"4a1ac56f-555b-4bd9-860a-5f750f9ed1eb\",\n \"location_id\": \"12aa\",\n \"service_id\": \"2\",\n \"date\": \"2020-10-12\" + Math.floor(Math.random() * 10),\n \"start_time\": \"10:00\",\n \"end_time\": \"12:00\",\n \"customer_id\": \"582c3a52-e36d-4ce2-aa37-0ccdfffcce3f\"\n                }              \nchai.request(baseUrl)\n  .post('/bookings')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n   expect(res).to.have.status(200)\n   expect(res.body.status).to.be.equal(true)\n   expect(res.body.data).to.be.an.instanceof(Object)\n   expect(res.body.data.id).to.be.a('number')\n   res.body.should.have.keys('id', 'status', 'location', 'service', 'staff')\n   res.body.should.have.keys('status', 'data')\n   done()\n  }).catch((err) => done(err))",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js:739:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "90dcaf10-7f10-410b-87b4-8e4077aa4e32",
                  "parentUUID": "3c5ab079-b1bb-48ff-a201-f22f3eed006f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "90dcaf10-7f10-410b-87b4-8e4077aa4e32"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1607,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "f91e2f39-0a34-46fd-8474-8423b45d7d4d",
              "title": "GET All bookings",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get all bookings",
                  "fullTitle": "Bookme App API Testing GET All bookings Get all bookings",
                  "timedOut": false,
                  "duration": 1733,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/bookings')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data.bookings)\n        .to.be.an.instanceof(Array)\n        .and.to.have.property(0)\n    expect(res.body.data.total_count).to.be.a('number')\n    expect(res.body.data.bookings[0]).to.have.property('id').and.to.be.a('number')\n    res.body.data.bookings[0].should.all.have.property('id')\n    res.body.should.have.keys('status', 'data', 'message')\n    expect(res.body.message).to.be.equal('bookings listed successfully')\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "a215566b-620a-41bc-8a16-e6a50e995513",
                  "parentUUID": "f91e2f39-0a34-46fd-8474-8423b45d7d4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET All bookings Should return an error",
                  "timedOut": false,
                  "duration": 1968,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/booking')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "47359080-3ba2-48d1-a1ba-7d4bf527bfc4",
                  "parentUUID": "f91e2f39-0a34-46fd-8474-8423b45d7d4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a215566b-620a-41bc-8a16-e6a50e995513",
                "47359080-3ba2-48d1-a1ba-7d4bf527bfc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3701,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0d655c62-59e0-4d89-acaf-4fa2ab292cc3",
              "title": "GET All bookings with Details",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get all bookings with details",
                  "fullTitle": "Bookme App API Testing GET All bookings with Details Get all bookings with details",
                  "timedOut": false,
                  "duration": 1262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/bookings_details')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data)\n        .to.be.an.instanceof(Array)\n        .and.to.have.property(0)\n    expect(res.body.data[0].location).to.contain.keys('id', 'name', 'city', 'state')\n    expect(res.body.data[0]).to.have.property('id').and.to.be.a('number')\n    res.body.data[0].should.have.property('id')\n    res.body.should.have.keys('status', 'data', 'message')\n    expect(res.body.message).to.be.equal('bookings listed successfully')\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "18505035-59db-4b00-9a83-50f345463f90",
                  "parentUUID": "0d655c62-59e0-4d89-acaf-4fa2ab292cc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET All bookings with Details Should return an error",
                  "timedOut": false,
                  "duration": 1798,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/booking_details')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "2f83bd91-86da-45df-851b-dfbda36724bc",
                  "parentUUID": "0d655c62-59e0-4d89-acaf-4fa2ab292cc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18505035-59db-4b00-9a83-50f345463f90",
                "2f83bd91-86da-45df-851b-dfbda36724bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3060,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "39c01a3a-8916-4d68-8351-66aa5143f76b",
              "title": "GET a booking",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get a booking",
                  "fullTitle": "Bookme App API Testing GET a booking Get a booking",
                  "timedOut": false,
                  "duration": 1645,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/bookings/80')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    expect(res.body.data).to.contain.keys('id', 'cart', 'timesheet', 'review', 'customer', 'location', 'service', 'staff')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"booking generated successfully\")\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "18ef51e1-1685-4a31-be7a-00cb22591021",
                  "parentUUID": "39c01a3a-8916-4d68-8351-66aa5143f76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET a booking Should return an error",
                  "timedOut": false,
                  "duration": 2176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/booking_details/300')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "2018606e-744d-4544-9540-3f88427331d0",
                  "parentUUID": "39c01a3a-8916-4d68-8351-66aa5143f76b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18ef51e1-1685-4a31-be7a-00cb22591021",
                "2018606e-744d-4544-9540-3f88427331d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3821,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "0f44cfef-620b-4d9c-b01b-c9b7139f5b85",
              "title": "POST Update Booking Status",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update Booking Status",
                  "fullTitle": "Bookme App API Testing POST Update Booking Status POST Update Booking Status",
                  "timedOut": false,
                  "duration": 1697,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body = {\n  \"id\": \"80\",\n  \"status\": \"completed\"\n}\nchai.request(baseUrl)\n  .post('/bookings/updateStatusForBooking')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"booking status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "00077079-500a-4c72-905b-fb9ab49caa4d",
                  "parentUUID": "0f44cfef-620b-4d9c-b01b-c9b7139f5b85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00077079-500a-4c72-905b-fb9ab49caa4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1697,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "914f78c3-27f9-4bbd-bd5c-bffa5b5daca0",
              "title": "POST Update Multiple Bookings Status",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update multiple bookings status",
                  "fullTitle": "Bookme App API Testing POST Update Multiple Bookings Status POST Update multiple bookings status",
                  "timedOut": false,
                  "duration": 1854,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"ids\": [\"98\",\"99\"],\n  \"status\": \"completed\"\n}                  \nchai.request(baseUrl)\n  .post('/bookings/updateStatusForBookings')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    expect(res.body.data.totalBookingCount).to.be.equal(2)\n    expect(res.body.data.totalBookingCount).to.be.equal(res.body.data.totalBookingsUpdated)\n    expect(res.body.data.totalFailedUpdates).to.be.equal(0)\n    expect(res.body.data.errors).to.be.an('array')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.data.should.have.keys(\"totalBookingCount\", \"totalBookingsUpdated\", \"totalFailedUpdates\", \"errors\")\n    res.body.message.should.be.equal(\"booking status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "2240d05b-7154-454e-93d8-528f0fbfdce3",
                  "parentUUID": "914f78c3-27f9-4bbd-bd5c-bffa5b5daca0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2240d05b-7154-454e-93d8-528f0fbfdce3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1854,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "7bfe4df3-f844-46f7-9740-46a8625b5b53",
              "title": "GET All carts",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get all carts",
                  "fullTitle": "Bookme App API Testing GET All carts Get all carts",
                  "timedOut": false,
                  "duration": 1815,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/carts')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data.carts)\n        .to.be.an.instanceof(Array)\n        .and.to.have.property(0)\n    expect(res.body.data.total_count).to.be.a('number')\n    expect(res.body.data.carts[0]).to.have.property('id').and.to.be.a('number')\n    res.body.data.carts[0].should.all.have.property('id')\n    res.body.should.have.keys('status', 'data', 'message')\n    expect(res.body.message).to.be.equal('carts listed successfully')\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "2e6aac10-4b7a-4a8b-8196-e128ae40c0dc",
                  "parentUUID": "7bfe4df3-f844-46f7-9740-46a8625b5b53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET All carts Should return an error",
                  "timedOut": false,
                  "duration": 1836,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/booking')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "cac5fdcf-2325-4dfb-af80-567b70b25813",
                  "parentUUID": "7bfe4df3-f844-46f7-9740-46a8625b5b53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e6aac10-4b7a-4a8b-8196-e128ae40c0dc",
                "cac5fdcf-2325-4dfb-af80-567b70b25813"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3651,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "e7ef8f9c-caca-44ed-813b-f7c425585431",
              "title": "GET One Cart",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get one cart",
                  "fullTitle": "Bookme App API Testing GET One Cart Get one cart",
                  "timedOut": false,
                  "duration": 2000,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/carts/17')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    expect(res.body.data.bookings).to.be.an.instanceof(Array)\n    expect(res.body.data).to.contain.keys('id', 'status', 'payment_status', 'bookings', 'customer', 'amount')\n    expect(res.body.data.amount).to.be.a('number')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"cart generated successfully\")\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "186b5eb5-854d-4e4c-89dc-d18cc6dd6327",
                  "parentUUID": "e7ef8f9c-caca-44ed-813b-f7c425585431",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should return an error",
                  "fullTitle": "Bookme App API Testing GET One Cart Should return an error",
                  "timedOut": false,
                  "duration": 1676,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(baseUrl)\n  .get('/cart/300')\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(404)\n    done()\n  }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "719da68b-2328-44e9-b940-708bdfdd093c",
                  "parentUUID": "e7ef8f9c-caca-44ed-813b-f7c425585431",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "186b5eb5-854d-4e4c-89dc-d18cc6dd6327",
                "719da68b-2328-44e9-b940-708bdfdd093c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3676,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "270cdfb4-3889-4f53-8a00-e56ea316434a",
              "title": "POST Update Cart Status",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update Booking Status",
                  "fullTitle": "Bookme App API Testing POST Update Cart Status POST Update Booking Status",
                  "timedOut": false,
                  "duration": 1632,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body = {\n  \"id\": \"17\",\n  \"status\": \"processing\"\n}\n                    \nchai.request(baseUrl)\n  .post('/carts/updateStatus')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"cart status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "60ac6b13-5799-42ed-8710-6233d17a4cd1",
                  "parentUUID": "270cdfb4-3889-4f53-8a00-e56ea316434a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60ac6b13-5799-42ed-8710-6233d17a4cd1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1632,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4dda4ee6-75ab-413c-9ff5-05d1081dfe32",
              "title": "POST Update Multiple Carts Status",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update multiple carts status",
                  "fullTitle": "Bookme App API Testing POST Update Multiple Carts Status POST Update multiple carts status",
                  "timedOut": false,
                  "duration": 1838,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"ids\": [17, 20],\n  \"status\": \"pending\"\n                      }\n                      \nchai.request(baseUrl)\n  .post('/carts/updateStatusForCarts')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Object)\n    expect(res.body.data.totalCartCount).to.be.equal(2)\n    expect(res.body.data.totalCartCount).to.be.equal(res.body.data.totalCartsUpdated)\n    expect(res.body.data.totalFailedUpdates).to.be.equal(0)\n    expect(res.body.data.errors).to.be.an('array')\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.data.should.have.keys(\"totalCartCount\", \"totalCartsUpdated\", \"totalFailedUpdates\", \"errors\")\n    res.body.message.should.be.equal(\"cart status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "47485fd7-3fbf-452e-8a25-68f3610550d3",
                  "parentUUID": "4dda4ee6-75ab-413c-9ff5-05d1081dfe32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47485fd7-3fbf-452e-8a25-68f3610550d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1838,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "6f7574b3-c02f-46a1-bbf5-79f238b40373",
              "title": "POST Update Payment Status",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Update payment status",
                  "fullTitle": "Bookme App API Testing POST Update Payment Status POST Update payment status",
                  "timedOut": false,
                  "duration": 1650,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"id\": \"17\",\n  \"reference\": \"fersdihkj\",\n  \"payment_type\": \"paystack\"\n}                        \nchai.request(baseUrl)\n  .post('/carts/updatePaymentStatus')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n     expect(res).to.have.status(200)\n     expect(res.body.status).to.be.equal(true)\n     expect(res.body.data).to.be.an.instanceof(Object)\n    res.body.should.have.keys('status', 'data', 'message')\n    res.body.message.should.be.equal(\"Payment status updated successfully\")\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "ec356a4f-795f-4c4a-9e26-9c544c0e0653",
                  "parentUUID": "6f7574b3-c02f-46a1-bbf5-79f238b40373",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec356a4f-795f-4c4a-9e26-9c544c0e0653"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1650,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "53e2c888-5986-4052-ac87-f04c30059e98",
              "title": "TIMESHEET",
              "fullFile": "C:\\Users\\MILITUS\\Documents\\npm-test-bookme\\test\\tests.js",
              "file": "\\test\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST Check Staff's Availability",
                  "fullTitle": "Bookme App API Testing TIMESHEET POST Check Staff's Availability",
                  "timedOut": false,
                  "duration": 1259,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message_body ={\n  \"staff_id\": \"de145622-86c2-4a22-9bed-8fd3969a080c\",\n  \"date\": \"2012-10-10\"\n}                          \nchai.request(baseUrl)\n  .post('/timesheets/availability')\n  .send(message_body)\n  .set({ \"Authorization\": `Bearer ${token}` })\n  .then((res) => {\n    expect(res).to.have.status(200)\n    expect(res.body.status).to.be.equal(true)\n    expect(res.body.data).to.be.an.instanceof(Array)\n    expect(res.body.data[0]).to.have.keys('start_time', 'end_time')\n    res.body.should.have.keys('status', 'data')\n    done()\n    }).catch((err) => done(err))",
                  "err": {},
                  "uuid": "fa69ecdb-514d-4058-b988-d057cf2f326e",
                  "parentUUID": "53e2c888-5986-4052-ac87-f04c30059e98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa69ecdb-514d-4058-b988-d057cf2f326e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1259,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}